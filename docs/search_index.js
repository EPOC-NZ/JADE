var documenterSearchIndex = {"docs":
[{"location":"api/#User-interface-functions","page":"API Reference","title":"User interface functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"These functions are to be utilised by JADE users to set up and run JADE models.","category":"page"},{"location":"api/#Functions-to-set-up-JADE-model-/-data","page":"API Reference","title":"Functions to set up JADE model / data","text":"","category":"section"},{"location":"api/#Using-run-files","page":"API Reference","title":"Using run files","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"JADE.define_JADE_model(::String)\nJADE.define_JADE_solve_options(::String)\nJADE.define_JADE_simulation(::String)","category":"page"},{"location":"api/#JADE.define_JADE_model-Tuple{String}","page":"API Reference","title":"JADE.define_JADE_model","text":"define_JADE_model(inputdir::String; run_file::String = \"run\")\n\nThis function reads a JADE run file in the Input/<inputdir> folder. In particular, this function reads the parameters that are needed in order to define the SDDP model.\n\nRequired Arguments\n\ninputdir is the name of the subdirectory (within Input) that contains the JADE data files.\n\nKeyword Arguments\n\nrun_file is the name of the csv file that contains the parameters we wish to load.\n\n\n\n\n\n","category":"method"},{"location":"api/#JADE.define_JADE_solve_options-Tuple{String}","page":"API Reference","title":"JADE.define_JADE_solve_options","text":"define_JADE_solve_options(inputdir::String; run_file = \"run\")\n\nThis function loads the training options for JADE.\n\nRequired Arguments\n\ninputdir is the name of the subdirectory (within Input) where the run_file is located.\n\nKeyword Arguments\n\nrun_file is the name of the csv file containing the parameters for the simulation.\n\n\n\n\n\n","category":"method"},{"location":"api/#JADE.define_JADE_simulation-Tuple{String}","page":"API Reference","title":"JADE.define_JADE_simulation","text":"define_JADE_simulation(inputdir::String; run_file = \"run\")\n\nThis function reads a csv file containing the settings for a JADE simulation.\n\nRequired Arguments\n\ninputdir is the name of the subdirectory (within Input) where the run_file is located.\n\nKeyword Arguments\n\nrun_file is the name of the csv file containing the parameters for the simulation.\n\n\n\n\n\n","category":"method"},{"location":"api/#Using-Julia-scripts","page":"API Reference","title":"Using Julia scripts","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"JADE.define_JADE_model()\nJADE.define_JADE_solve_options()\nJADE.define_JADE_simulation()\nJADE.create_JADE_model\nJADE.DecisionRule","category":"page"},{"location":"api/#JADE.define_JADE_model-Tuple{}","page":"API Reference","title":"JADE.define_JADE_model","text":"define_JADE_model(;\n    data_dir::String = \"\",\n    policy_dir::String = \"\",\n    start_year::Int = 0,\n    start_week::Int = 1,\n    total_weeks::Int = 52,\n    hydro_sample_range::Union{Tuple{Int,Int},Int,UnitRange{Int},Vector} = 0,\n    discount::Real = 0.0,\n    losses::Symbol = :default,\n    DIA::Int = 1,\n    flow_penalties::Union{Tuple{Real,Real},NamedTuple{(:under, :over),<:Tuple{Real,Real}}} = (\n        500.0,\n        50.0,\n    ),\n    weekly_discounting::Bool = true,\n    scale_reservoirs::Real = 1.0,\n    scale_objective::Real = 1.0,\n    use_terminal_mwvs::Bool = false,\n    first_week_known::Bool = false,\n    steady_state::Union{Nothing,Bool} = nothing,\n    decision_rules::Vector{DecisionRule} = DecisionRule[],\n    scenario_dir::String = \"\",\n)\n\nThis function sets the parameters that are needed in order to define the SDDP model.\n\nRequired Arguments\n\ndata_dir is the name of the subdirectory (within Input) that contains the JADE data files.\n\npolicy_dir is the name of the subdirectory (within Output/data_dir) that the cuts and simulation output will be stored in.\n\nstart_year is the year that the policy is created for.\n\nhydro_sample_range is the set of years that define the hydro inflow distribution.\n\nKeyword Arguments\n\nstart_week is the first week of the start_year.\n\ntotal_weeks is the total number of weeks that the policy is created for.\n\ndiscount is the discount factor used for the steady-state model, must be less than 1. Setting this to 0 will set JADE to a finite horizon model. The terminal water values will only be used if discount is 0.\n\nlosses sets the loss model; this can be :none, :piecewise or :resistive.\n\nDIA is the dynamic inflow adjustment parameter; 0 or 1 means no adjustment, higher values simulate an increased temporal correlation by increasing the variance.\n\nflow_penalties is a Tuple of the cost of violating the lower bound, upper bound flow constraints, respectively.\n\nweekly_discounting is a Bool which sets the discounting to occur in each stage rather than at the end of the horizon.\n\nscale_reservoirs this may be increased to improve numerical stability (~100).\n\nscale_objective scales down the objective function, this also scales down cuts (~1000).\n\nuse_terminal_mwvs if set to true this will use the MWVs stored in terminal_water_value.csv, if set to false these won't be used.\n\nfirst_week_known if set to true the training will use deterministic inflows for the first week of the model. These will be sourced from the inflows recorded for that week and year.\n\nsteady_state if set to true the training will operate in steady-state mode, if false the model will use a finite-horizon.\n\ndecision_rules if any reservoir has restrictions on output, as a function of the storage, a DecisionRule can be applied. A vector of such decisions can be supplied via this argument.\n\n\n\n\n\n","category":"method"},{"location":"api/#JADE.define_JADE_solve_options-Tuple{}","page":"API Reference","title":"JADE.define_JADE_solve_options","text":"define_JADE_solve_options(;\n    iterations::Int = 0,\n    random_seed::Int = Int(floor((time() - floor(time())) * 10000)),\n    risk::Union{Tuple{Real,Real},NamedTuple{(:lambda, :beta),<:Tuple{Real,Real}}} = (\n        0.0,\n        1.0,\n    ),\n    warmstart_cuts::Bool = false,\n    reset_starting_levels::Union{Symbol,Bool} = :default,\n    saved_cuts::String = \"\",\n    cutselection::Int = 1,\n    fractionMC::Float64 = 1.0\n    custom_inflow_file::String = \"\"\n    loadcuts_if_nonempty::Bool = false,\n    eoh_cutfile::String = \"\",\n    write_eohcuts::Bool = false\n)\n\nThis function defines the training options for JADE.\n\nKeyword Arguments\n\niterations is the number of iterations of SDDP to complete when optimize_policy! is called.\n\nrandom_seed sets the random seed prior to sampling for the forward pass.\n\nrisk is a Tuple (λ,β) defining the objective weight λ and the tail probability β.\n\nwarmstart_cuts if set to true, this will load stored cuts before training.\n\nreset_starting_levels is used to reset the reservoirs in a steady-state model. This will enable a steady-state model to focus on a single starting set of reservoir levels (after initially finding an end-of-horizon value function).\n\nsaved_cuts is the policy subdirectory from which the cuts should be loaded. If not specified, cuts will be loaded from the policy subdirectory set for the model.\n\ncutselection is an SDDP.jl parameter.\n\nfractionMC is the proportion of forward passes that are sampled using Monte-Carlo; the rest are sequentially sampled from the sequences.\n\ncustom_inflow_file is the name of the file in the Input/data_dir directory containing the custom inflow sequences.\n\nloadcuts_if_nonempty if set to true cuts will be loaded from file even if cuts are already in the model.\n\neoh_cutfile the name of end-of-horizon cut file for finite-horizon models.\n\nwrite_eohcuts if set to true steady-state models will write end-of-horizon cuts files.\n\n\n\n\n\n","category":"method"},{"location":"api/#JADE.define_JADE_simulation-Tuple{}","page":"API Reference","title":"JADE.define_JADE_simulation","text":"define_JADE_simulation(;\n    sim_dir::String = \"\",\n    sim_type::Symbol = :not_set,\n    replications::Int = 0,\n    sim_years = nothing,\n    randomize_years::Bool = false,\n    reset_starting_levels::Bool = false,\n    number_of_cycles::Int = 1,\n    initial_stage::Int = 1,\n    initial_state::Union{Nothing,Dict{String,<:Real}} = nothing,\n    random_seed::Int = Int(floor((time() - floor(time())) * 10000)),\n)\n\nThis function defines the settings for a JADE simulation.\n\nKeyword Arguments\n\nsim_dir is the name of the subdirectory (within Output/<data_dir>/<policy_dir>) in which the simulation output will be stored.\n\nsim_type is the type of simulation; either :monte_carlo or :historical.\n\nreplications is the number of sequences of inflows that are simulated. If the sim_type is :monte_carlo or randomize_years set to true then this argument must be set, otherwise it must not be set.\n\nsim_years specifies the years that will be simulated.\n\nrandomize_years is used with historical simulations; if true this causes the simulation to randomly sample from sim_years, whereas if false the simulation will sample the years in sequence.\n\nreset_starting_levels is used to reset the reservoirs in a steady-state model. This will enable a simulation to sample a number of inflows sequences, with the reservoirs starting at the from the same points for each sequence.\n\nnumber_of_cycles is used with reset_starting_levels to show a simulation of multiple years, from a single single starting point. Must be used with a steady-state policy.\n\ninitial_state is a vector of initial storage levels for the simulation, indexed by the reservoirs.\n\ninitial_stage is the stage of the trained model that the simulation will start from.\n\nrandom_seed sets the random seed prior to generating the random inflow sequences.\n\n\n\n\n\n","category":"method"},{"location":"api/#JADE.create_JADE_model","page":"API Reference","title":"JADE.create_JADE_model","text":"create_JADE_model(rundata::RunData, optimizer)\n\nThis function creates a JADEModel consisting of an SDDP policy graph, and the associated data.\n\nRequired Arguments\n\nrundata is the RunData object containing all the SDDP model details.\n\noptimizer is the JuMP optimizer you wish to use to train the policy.\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.DecisionRule","page":"API Reference","title":"JADE.DecisionRule","text":"function DecisionRule(\n    slope::Real,\n    intercept::Real,\n    boundtype::Symbol,\n    station::Symbol,\n    reservoir::Symbol,\n    flowtype::Symbol,\n    weeks::T where {T<:Union{Tuple{Int,Int},Int,UnitRange{Int},Vector}} = 1:52,\n)\n\nThis function constructs a DecisionRule object. See the JADE user documentation for further details. DecisionRules can be applied to spill and generation at hydro stations, these are both measured in MWh.\n\nRequired Arguments\n\nslope is the slope, w.r.t. the current storage in reservoir, of the (linear) bound applied to generation and / or spill flow corresponding to station. Units are MWh / Mm³.\n\nintercept is the bound applied to generation and / or spill flow corresponding to station when reservoir is at 0 storage.  Units are (MWh).\n\nboundtype is set to :upper, :lower, or :equality depending on how the flow should be restricted.\n\nstation is the hydro station that the decision rule restricts.\n\nreservoir is the hydro reservoir whose  affects the bound applied.\n\nflowtype is set to :generation, :spill, or :combined.\n\nweeks defines the weeks in the year that the decision rule is in effect. E.g. [1:10,43:52].\n\n\n\n\n\n","category":"type"},{"location":"api/#Functions-for-training-and-simulation","page":"API Reference","title":"Functions for training and simulation","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"JADE.optimize_policy!\nJADE.simulate","category":"page"},{"location":"api/#JADE.optimize_policy!","page":"API Reference","title":"JADE.optimize_policy!","text":"optimize_policy!(\n    JADEmodel::JADEModel,\n    solveoptions::JADESolveOptions;\n    async::Bool = false,\n    print_level::Int = 1,\n)\n\nThis function trains the JADEmodel.\n\nThe output from this simulation will automatically be written into the Output/data_dir/policy_dir/sim_dir subdirectory.\n\nRequired Arguments\n\nJADEmodel is the model detailing the year that we wish to create a policy for, and all the corresponding data.\n\nsolveoptions contains all the SDDP.jl settings, as well as settings and directories for loading cuts.\n\nKeyword Arguments\n\nasync is a boolean that sets whether SDDP.jl will run in parallel. Currently recommended to be set to false.\n\nprint_level is an SDDP.jl setting.\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.simulate","page":"API Reference","title":"JADE.simulate","text":"simulate(JADEmodel::JADEModel, parameters::JADESimulation)\n\nThis function carries out a simulation of a JADE model; all the specifications for this simulation are defined within the parameters argument.\n\nThe output from this simulation will automatically be written into the Output/data_dir/policy_dir/sim_dir subdirectory.\n\nRequired Arguments\n\nJADEmodel is the model detailing the scenario that we wish to simulate, and all the corresponding data.\n\nparameters contains all the simulation information, including the number of replications, the type of simulation, the hydrological years to sample from, etc.\n\n\n\n\n\n","category":"function"},{"location":"api/#Visualisation-functions","page":"API Reference","title":"Visualisation functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"JADE.plot_storage\nJADE.plot_prices","category":"page"},{"location":"api/#JADE.plot_storage","page":"API Reference","title":"JADE.plot_storage","text":"plot_storage(\n    results::Array{Array{Dict{Symbol,Any},1},1},\n    filename::String = randstring(6);\n    reservoirs::Array{Symbol,1} = collect(keys(results[1][1][:reslevel])),\n)\n\nThis function plots the storage in each of the reservoirs (Mm³) alongside the total storage (GWh) as an interactive webpage.\n\nRequired Arguments\n\nresults is the output from a JADE simulation.\n\nKeyword Arguments\n\nfilename is the name of the file in which you wish to store the visualisation; the filename will be a random string if omitted.\n\nreservoirs is an array of Symbols for the reservoirs that are to be visualised.\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.plot_prices","page":"API Reference","title":"JADE.plot_prices","text":"plot_prices(\n    results::Array{Array{Dict{Symbol,Any},1},1},\n    filename::String = randstring(6);\n    nodes::Array{Symbol,1} = results[1][1][:prices].axes[1],\n    blocks::Array{Symbol,1} = results[1][1][:prices].axes[2],\n)\n\nThis function plots the prices for each of the nodes and load blocks alongside the total storage (GWh) as an interactive webpage.\n\nRequired Arguments\n\nresults is the output from a JADE simulation.\n\nKeyword Arguments\n\nnodes is an array of Symbols for the nodes that are to be visualised.\n\nfilename is the name of the file in which you wish to store the visualisation; the filename will be a random string if omitted.\n\nblocks is an array of Symbols for the load blocks that are to be visualised.\n\n\n\n\n\n","category":"function"},{"location":"api/#Internal-functions","page":"API Reference","title":"Internal functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"These are internal functions within JADE that should only be used or modified by persons who have a deep understanding of the underlying SDDP model.","category":"page"},{"location":"api/#Utility-functions","page":"API Reference","title":"Utility functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"JADE.gettimeseries\nJADE.calculatetime\nJADE.cleandata\nJADE.between","category":"page"},{"location":"api/#JADE.gettimeseries","page":"API Reference","title":"JADE.gettimeseries","text":"gettimeseries(file::String)\n\nRead timeseries with arbitrary number of columns from file.\n\nRequired Arguments\n\nfile is the name of the file from which JADE is loading Timeseries data.\n\nExample File\n\n% Data (A,B,C)\nYEAR,WEEK,A,B,C\n2005,1,4,18.68,4.49\n2005,2,4,18.68,4.49\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.calculatetime","page":"API Reference","title":"JADE.calculatetime","text":"This function returns the year and week, given a stage.\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.cleandata","page":"API Reference","title":"JADE.cleandata","text":"For a data frame containing columns named WEEK and YEAR, return only the subset of data that falls within a relevant time range.\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.between","page":"API Reference","title":"JADE.between","text":"Determines if a time point is between two other time points, inclusive\n\n\n\n\n\n","category":"function"},{"location":"api/#Data-input-functions","page":"API Reference","title":"Data input functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"JADE.parsefile\nJADE.getitems\nJADE.parse_run_options\nJADE.gethydros\nJADE.getinflows_for_historical\nJADE.getnaturalarcs\nJADE.getterminalvalue\nJADE.getthermalstations\nJADE.initialisereservoirs\nJADE.getdemand\nJADE.checkoutages\nJADE.get_file_directory\nJADE.check_settings_compatibility","category":"page"},{"location":"api/#JADE.parsefile","page":"API Reference","title":"JADE.parsefile","text":"parsefile(f::Function, file::String, trim::Bool = false)\n\nThis function reads in a data file and extracts each of the non-comment / non-empty rows, splits into into a vector using ',' as the delimiter, and then applies some custom processing f.\n\nRequired Arugments\n\nf custom function that processes a line of the data file.\n\nfile path of the file.\n\nKeyword Arguments\n\ntrim if true trailing commas will be discarded.\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.getitems","page":"API Reference","title":"JADE.getitems","text":"getitems(io::IOStream, trim::Bool)\n\nThis function takes an IOStream for a CSV file and reading the first line, decarding empty / comment rows, and otherwise splitting into into a vector using ',' as the delimiter. This vector is returned.\n\nRequired Arugments\n\nio IOStream object for a CSV file.\n\ntrim if true trailing commas will be discarded.\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.parse_run_options","page":"API Reference","title":"JADE.parse_run_options","text":"parse_run_options(file::String)\n\nThis function loads a run file (CSV) creates a Dict that has keys corresponding to various JADE RunData fields, and their associated values.\n\nRequired Arugments\n\nfile is the path to the run file that is being loaded.\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.gethydros","page":"API Reference","title":"JADE.gethydros","text":"gethydros(file::String)\n\nDescription\n\nRead list of hydro station data from file. Capacity in MW; Specific power in MW/cumec; Spillway max flow in cumecs (can be zero if no spillway exists, or \"na\" for unlimited spill). The columns MUST be ordered as shown below.\n\nExample File\n\nGENERATOR,HEAD_WATER_FROM,TAIL_WATER_TO,POWER_SYSTEM_NODE,CAPACITY,SPECIFIC_POWER,SPILLWAY_MAX_FLOW\nArapuni,Lake_Arapuni,Lake_Karapiro,NI,196.7,0.439847649,99999\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.getinflows_for_historical","page":"API Reference","title":"JADE.getinflows_for_historical","text":"Returns an inflow matrix (actually a vector) for a given year\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.getnaturalarcs","page":"API Reference","title":"JADE.getnaturalarcs","text":"getnaturalarcs(file::String)\n\nDescription\n\nRead list of hydro station data from file. Canals, rivers, and other means of getting water from one place to another. Excludes power station turbines and spillways; those are covered in the hydrostations file. Min/max flow in cumecs. NA in MINFLOW converted to 0.0 NA in MAX_FLOW converted to 99999.0 The columns MUST be ordered as shown below.\n\nExample File\n\nORIG,DEST,MIN_FLOW,MAX_FLOW\nLake_Wanaka,Lake_Dunstan, NA, NA\nLake_Hawea,Lake_Dunstan, 0.00, 99999\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.getterminalvalue","page":"API Reference","title":"JADE.getterminalvalue","text":"getterminalvalue(file::String)\n\nDescription\n\nAt the final stage terminal cost is a piecewise linear function of the national stored energy. We define a number of linear equations.\n\nValue of stored energy in hydro lakes at the end of the time horizon.\nSTORED_ENERGY is the cumulative stored energy in GWh.\nVALUE is the marginal value in /MWh. This column should be a decreasing sequence.\n\nThe columns MUST be ordered as shown below.\n\nExample File\n\nSTORED_ENERGY, VALUE\n1000, 137.218398630355   % first 1000 GWh is worth ~ $137/MWh\n1500, 85.9718321526058\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.getthermalstations","page":"API Reference","title":"JADE.getthermalstations","text":"getthermalstations(file::String, nodes::Vector{Symbol})\n\nDescription\n\nRead thermal station list from file. The columns MUST be ordered as shown below.\n\nExample File\n\n% Thermal station data,,,,,,,,,\n% Heat rate in GJ/MWh,,,,,,,,,\n% Capacity in MW,,,,,,,,,\n% O&M cost in $/MWh,,,,,,,,,\nGENERATOR,NODE,FUEL,HEAT_RATE,CAPACITY,OMCOST,START_YEAR,START_WEEK,END_YEAR,END_WEEK\nStratford_220KV,NI,gas,7.6,377,0,0,0,0,0\nHuntly_e3p,NI,gas,7.2,403,0,2007,23,0,0\nHuntly_main_g1,NI,coal,10.3,250,0,0,0,0,0\nHuntly_main_g2,NI,coal,10.3,250,0,0,0,0,0\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.initialisereservoirs","page":"API Reference","title":"JADE.initialisereservoirs","text":"initialisereservoirs(file::String, limits::String)\n\nDescription\n\nRead list of reservoirs from file. Capacity and initial contents in Mm³. The columns MUST be ordered as shown below.\n\nExample File\n\nRESERVOIR, INFLOW_REGION, CAPACITY, INI_STATE\nLake_Benmore, SI, 423451075.96799916, 322000320.233399\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.getdemand","page":"API Reference","title":"JADE.getdemand","text":"getdemand(file::String, durations::JADE.TimeSeries{Dict{Symbol,Float64}})\n\nRead the demand in MW\n\nExample\n\n% Demand (MW):\nNODE,YEAR,WEEK,peak,shoulder,offpeak\nNI,2005,1,2132.15,1616.51,1116.58\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.checkoutages","page":"API Reference","title":"JADE.checkoutages","text":"This function checks that there are no outages greater than the capacity of a station and outage data spans run length\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.get_file_directory","page":"API Reference","title":"JADE.get_file_directory","text":"get_file_directory(x::String, rundata::RunData; verbose::Bool = true)\n\nThis function looks in various locations for input file x. If the rundata references a scenario_dir then the first directory to search is <datadir>/datafiles/<scenario_dir>.\n\nRequired Arguments\n\nx is the name of the input file. rundata is a JADE RunData object.\n\nKeyword Arguments\n\nverbose if set to true the function will print info to the REPL.\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.check_settings_compatibility","page":"API Reference","title":"JADE.check_settings_compatibility","text":"check_settings_compatibility(;\n    rundata::Union{Nothing,RunData} = nothing,\n    solveoptions::Union{Nothing,JADESolveOptions} = nothing,\n    simulation::Union{Nothing,JADESimulation} = nothing,\n)\n\nThis function checks the JADE settings for compatibility / consistency.\n\nKeyword Arguments\n\nrundata contains the JADE model options. solveoptions contains the JADE training options. simulation contains the JADE simulation settings.\n\n\n\n\n\n","category":"function"},{"location":"api/#Data-processing-functions","page":"API Reference","title":"Data processing functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"JADE.out_neighbors\nJADE.hasdownstream\nJADE.adjustinflows","category":"page"},{"location":"api/#JADE.out_neighbors","page":"API Reference","title":"JADE.out_neighbors","text":"out_neighbors(vertex::Symbol, edges::Vector{NTuple{2,Symbol}})\n\nHelper function to work out nodes that are adjacent and downstream.\n\nRequired Arguments\n\nvertex is the vertex in the network we are finding downstream neighbors for.\n\nedges is a vector of all the edges in the hydro network.\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.hasdownstream","page":"API Reference","title":"JADE.hasdownstream","text":"hasdownstream(\n    sets::Sets,\n    station_arcs::Dict{NTuple{2,Symbol},StationArc},\n)\n\nThis function is used to determine which hydro stations are present downstream from all reservoirs.\n\nInputs\n\nsets                      A JADE set structure. Should include all arcs and nodes.   station_arcs              A dictionary we will use to get the station name from a station arc.\n\nReturns\n\nreservoirhasdownstream  A dictionary indexed by reservoirs that stores a                             list of hydro stations that each reservoir has                             between itself and the sea.\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.adjustinflows","page":"API Reference","title":"JADE.adjustinflows","text":"adjustinflows(inflow_file::String, rundata::RunData)\n\nDescription\n\nThis method applies DIA to the inflow file.\n\n\n\n\n\n","category":"function"},{"location":"api/#Data-output-functions","page":"API Reference","title":"Data output functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"JADE.diatofile\nJADE.write_sim_results\nJADE.write_training_results","category":"page"},{"location":"api/#JADE.diatofile","page":"API Reference","title":"JADE.diatofile","text":"diatofile(\n    adjusted::Dict{Symbol,TimeSeries{Float64}},\n    outpath::String,\n    policy_dir::String,\n)\n\nDescription\n\nThis function saves DIA adjusted inflows to file.\n\nRequired Arguments\n\nadjusted is the dictionary of DIA-adjusted inflows   outpath is the filename for adjusted inflows   policy_dir is the subdirectory where the outputs are stored\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.write_sim_results","page":"API Reference","title":"JADE.write_sim_results","text":"write_sim_results(results, data::JADEData, parameters::JADESimulation)\n\nThis function writes results from a simulation.\n\nRequired arguments\n\nresults is a dictionary of results.\n\ndata is a JADE data object for the problem simulated.\n\nparameters contains all the simulation settings.\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.write_training_results","page":"API Reference","title":"JADE.write_training_results","text":"This function saves output from policy generation.\n\n\n\n\n\n","category":"function"},{"location":"api/#Structs","page":"API Reference","title":"Structs","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"JADE.RunData\nJADE.JADESolveOptions\nJADE.JADESimulation\nJADE.JADEData","category":"page"},{"location":"api/#JADE.RunData","page":"API Reference","title":"JADE.RunData","text":"An object containing the JADE model settings, required to define the stage problems in SDDP.jl.\n\nFields\n\ndata_dir::String directory for writing output.\n\nstart_yr::Int first year in the problem.\n\nstart_wk::Int first week in the problem.\n\nnumber_of_wks::Int the number of weeks that we solve for.\n\nsample_years::Vector{Int} array of years that inflows are sampled from.\n\ndialength::Int inflow correlation length.\n\npenalty_lb::Float64 penalty for flows below lower bound.\n\npenalty_ub::Float64 penalty for flows above upper bound.\n\npolicy_dir::String output directory for that the policy cuts and settings are stored in.\n\ndiscount::Float64 steady-state discount factor (0 if finite-horizon).\n\nlosses::Symbol type of losses (:none,:piecewise,:resistive).\n\nnscenarios::Int number of possible inflow realisations per week.\n\nweekly_discounting::Bool set to true if (equivalent) discount should applied weekly.\n\nscale_reservoirs::Float64 scale factor for reservoirs.\n\nscale_objective::Float64 scale factor for objective.\n\nuse_terminal_mwvs::Bool boolean specifying whether we use the given terminal MWVs.\n\nfirst_week_known::Bool set to true if first-week inflow is set to historical value from training year.\n\nsteady_state::Bool set to true if the model is steady-state.\n\ndecision_rules::Vector{DecisionRule} vector of decision rules that can restrict how reservoirs are operated.\n\nscenario_dir::String name of directory within Input/<datadir>/datafiles/ containing data files that change within the scenario.\n\n\n\n\n\n","category":"type"},{"location":"api/#JADE.JADESolveOptions","page":"API Reference","title":"JADE.JADESolveOptions","text":"An object containing SDDP settings used when training a JADE model.\n\nFields\n\niterations::Int sddp iterations to be performed.\n\nriskmeasure::SDDP.AbstractRiskMeasure sddp risk measure to use (set up to be CVaR).\n\nwarmstart_cuts::Bool if true will load existing cuts, either from local directory or 'savedcuts'.\n\nreset_starting_levels::Union{Symbol,Bool} if true will reset starting storage levels to initial values each forward pass.\n\nseed::Int random seed.\n\nsavedcuts::String alternate folder from which to retrieve cuts.\n\ncutselection::Int sddp cut_deletion_minimum parameter.\n\nfractionMC::Float64 fraction of forward passes using monte-carlo.\n\ncustom_inflow_file::String file specifying sequences of inflows to be used in forward pass (fractionMC must be < 1).\n\nloadcuts_if_nonempty::Bool set this to true if the cut file should be loaded into a model with existing cuts.\n\neoh_cutfile::String EOH cut file to load as the cuts for the final stage of a finite-horizon model.\n\nwrite_eohcuts::Bool if true a steady-state model will write a set of files to Input/<data_dor>/EOH.\n\n\n\n\n\n","category":"type"},{"location":"api/#JADE.JADESimulation","page":"API Reference","title":"JADE.JADESimulation","text":"An object containing JADE simulation settings.\n\nFields\n\nsim_dir::String is the folder that the simulation output should be written to (Output/<data_dir>/<policy_dir>/<sim_dir>).\n\nsim_type::Symbol is the type of simulation, either :monte_carlo or :historical.\n\nreplications::Int is the number of replications of the simulation.\n\nsim_years::Union{Nothing,Vector{Int}} is either nothing or a vector of years that should be sampled from in the simulation.\n\nrandomize_years::Bool if true the simulation will randomly choose years from sim_years (with replacement); otherwise the simulation sequentially samples the years from sim_years (in this case replications is automatically set).\n\nreset_starting_levels::Union{Symbol,Bool} if true the simulation will reset the initial storage levels after each iteration, even for steady-state models.\n\nnumber_of_cycles::Int for steady-state models, if this is greater than 1, each replication of the simulation will run number_of_cycles times; reset_starting_levels must be set to true.\n\ninitial_stage::Int is the stage (not the week) of the simulation that the simulation will start from.\n\ninitial_state::Union{Nothing,Dict{String,Float64}} is the initial state variables in the initial stage\n\nrandom_seed::Int is the random seed for the simulation.\n\n\n\n\n\n","category":"type"},{"location":"api/#JADE.JADEData","page":"API Reference","title":"JADE.JADEData","text":"An object containing all the data required to run the JADE model.\n\nFields\n\nrundata Run-related constants.\n\nthermal_stations Dictionary of thermal power station properties.\n\nhydro_stations Dictionary of hydro station properties.\n\nreservoirs Dictionary of reservoir properties.\n\nfuel_costs Time series of weekly fuel costs.\n\ncarbon_content Carbon content for each fuel type.\n\ninflow_mat Structure for storing inflow scenarios.\n\nstation_arcs Properties of arcs that correspond to hydro releases or spills.\n\nnatural_arcs Arcs not going through hydro stations.\n\nnodehas Dictionary of node properties.\n\nspMax The maximum specific power value.\n\ntransmission Dictionary of transmission line properties.\n\nloops Array of independent cycles in the transmission network, each entry being an array of arcs.\n\ndurations Timeseries with block durations.\n\ndemand Demand data.\n\noutage Outage each week for each station.\n\ndr_tranches Tranches for power-based demand response and load shedding.\n\nen_tranches Tranches for energy-based demand response.\n\nterminal_eqns Equations for terminal water value.\n\nsets Structure containing all sets for the JADE model.\n\n\n\n\n\n","category":"type"},{"location":"api/#Modified-SDDP.jl-functionality","page":"API Reference","title":"Modified SDDP.jl functionality","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"JADE.read_finalcuts_from_file\nJADE.write_cuts_to_file\nJADE.WrapHistorical\nJADE.InSampleMonteCarlo2","category":"page"},{"location":"api/#JADE.read_finalcuts_from_file","page":"API Reference","title":"JADE.read_finalcuts_from_file","text":"function read_finalcuts_from_file(\n\tmodel::SDDP.PolicyGraph{T},\n\tfilename::String,\n\tcutsfromstage::Int,\n\tlaststage::Int;\n\tnode_name_parser::Function = SDDP._node_name_parser,\n) where {T}\n\nRequired Arguments\n\nmodel The SDDP PolicyGraph that cuts are being loaded into.\n\nfilename the full path to the cuts file being read.\n\ncutsfromstage the index of the stage (not necessarily the week of the year) that cuts should be extracted from.\n\nlaststage the index of the stage of the model that the cuts are being loaded into.\n\nnode_name_parser SDDP function to convert the Int for laststage into the name of the SDDP node.\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.write_cuts_to_file","page":"API Reference","title":"JADE.write_cuts_to_file","text":"function write_cuts_to_file(\n\tmodel::SDDP.PolicyGraph{T},\n\tfilename::String,\n\tstart_wk::Int,\n) where {T}\n\nThis function writes a cuts json file that is modified so that stage 1 is always associated with week 1. This can only be used with a 52-week model. (It should only be used with steady-state JADE models.)\n\nRequired Arguments\n\nmodel The SDDP PolicyGraph that cuts are being written from.\n\nfilename the full path to the cuts file being written.\n\nstart_wk the week of the year that corresponds to stage 1 in the SDDP model.\n\n\n\n\n\n","category":"function"},{"location":"api/#JADE.WrapHistorical","page":"API Reference","title":"JADE.WrapHistorical","text":"WrapHistorical(\n    scenarios::Vector{Vector{Tuple{T,S}}},\n    probability::Vector{Float64},\n) where {T,S}\n\nA sampling scheme that samples a scenario from the vector of scenarios scenarios according to probability.\n\nExample\n\nWrapHistorical(\n    [\n        [(1, 0.5), (2, 1.0), (3, 0.5)],\n        [(1, 0.5), (2, 0.0), (3, 1.0)],\n        [(1, 1.0), (2, 0.0), (3, 0.0)]\n    ],\n    [0.2, 0.5, 0.3],\n)\n\n\n\n\n\nWrapHistorical(scenarios::Vector{Vector{Tuple{T,S}}}) where {T,S}\n\nA deterministic sampling scheme that iterates through the vector of provided scenarios. The initial states in each iteration (other than the first) are set to the ending state of the previous forward pass.\n\nUsed in the forward pass of the training to enable custom inflow sequences in steady-state models (see solve.jl).\n\nExample\n\nWrapHistorical([\n    [(1, 0.5), (2, 1.0), (3, 0.5)],\n    [(1, 0.5), (2, 0.0), (3, 1.0)],\n    [(1, 1.0), (2, 0.0), (3, 0.0)],\n])\n\n\n\n\n\n","category":"type"},{"location":"api/#JADE.InSampleMonteCarlo2","page":"API Reference","title":"JADE.InSampleMonteCarlo2","text":"function InSampleMonteCarlo2(;\n\tmax_depth::Int = 0,\n\tinitial_stage::Int = 1,\n\tterminate_on_cycle::Bool = false,\n\tterminate_on_dummy_leaf::Bool = true,\n\trollout_limit::Function = i -> typemax(Int),\n)\n\nThis function creates an instance of the InSampleMonteCarlo2 sampling_scheme. This is used for Monte Carlo simulations that may start from an arbitrary stage (initial_stage).\n\nKeyword Arguments\n\nmax_depth is the maximum number of stages to simulate.\n\ninitial_stage is the stage number of the initial stage.\n\nterminate_on_cycle if true the simulation will stop if it returns to a previously visited node.\n\nterminate_on_dummy_leaf if true the simulation will may stop if it the probabilities of the noises don't sum to 1.\n\nrollout_limit is a function that allows the number of simulated stages to vary with the training iteration number.\n\n\n\n\n\n","category":"type"},{"location":"","page":"JADE","title":"JADE","text":"CurrentModule = JADE\nDocTestSetup = quote\n    using JADE\nend","category":"page"},{"location":"#JADE:-a-Julia-DOASA-Environment","page":"JADE","title":"JADE: a Julia DOASA Environment","text":"","category":"section"},{"location":"","page":"JADE","title":"JADE","text":"JADE is a sophisticated hydro-thermal (and demand-response) scheduling tool calibrated to the New Zealand electricity system. JADE leverages the SDDP.jl package in order to find optimal waters values and release policies.","category":"page"},{"location":"#Requirements","page":"JADE","title":"Requirements","text":"","category":"section"},{"location":"","page":"JADE","title":"JADE","text":"JADE requires Julia 1.6+, JuMP 1.0+, SDDP.jl and appropriate optimizer(s).","category":"page"},{"location":"#Installation","page":"JADE","title":"Installation","text":"","category":"section"},{"location":"","page":"JADE","title":"JADE","text":"JADE is installed by the pkg interface provided by Julia. In the Julia REPL, simply enter the following command.","category":"page"},{"location":"","page":"JADE","title":"JADE","text":"] add \"https://github.com/EPOC-NZ/JADE.git\"","category":"page"},{"location":"","page":"JADE","title":"JADE","text":"Julia will install all dependencies automatically, ensuring compatibility. If you encounter an issue during installation, it may be due to another package with dependencies that conflict with JADE's.","category":"page"},{"location":"#Running-JADE","page":"JADE","title":"Running JADE","text":"","category":"section"},{"location":"","page":"JADE","title":"JADE","text":"See the documentation for specifics about the JADE inputs and how to run JADE.","category":"page"},{"location":"","page":"JADE","title":"JADE","text":"The Electricity Authority hosts a repository of JADE input files. These can be accessed from the EMI website. Any input files in the JADE Github repository are for testing purposes only.","category":"page"},{"location":"#Bugs","page":"JADE","title":"Bugs","text":"","category":"section"},{"location":"","page":"JADE","title":"JADE","text":"Please raise an issue if you experience an error while using JADE.","category":"page"}]
}
